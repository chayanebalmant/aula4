ctrl+enter para executar comandos selecionados
1 - faça insert na tabela UF com todas as siglas dos estados do Brasil
select * from public.uf

insert into 
	public.uf (id, nome, sigla) 
values
	(1, 'Parana', 'PR')
	
insert into 
	public.uf (id, nome, sigla) 
values
	(3, 'Santa Catarina', 'SC')

insert into 
	public.uf (id, nome, sigla) 
values
	(4, 'Acre', 'AC')

insert into 
	public.uf (id, nome, sigla) 
values
	(5, 'Alagoas', 'AL')

insert into 
	public.uf (id, nome, sigla) 
values
	(6, 'Amapá', 'AP')


2 - insira as seguintes cidades:
Para o SC
* Chapecó
* Blumenau
* Joinville

Para o PR
* Curitiba
* Maringá
* Lunardeli
* Apucarana
* Santa fé
* São Miguel do Iguaçu
* Arapongas
* Ponta Grossa
* Jandaia do Sul

Para o SP
*Ribeirão Preto

RESOLUCAO:
select * from public.cidade
delete from public.cidade where id = 1	
insert into
	public.cidade(id, id_uf, nome)
values
	(1, 2, 'Ribeirão Preto')

insert into
	public.cidade(id, id_uf, nome)
values
	(2, 3, 'Chapecó')

insert into
	public.cidade(id, id_uf, nome)
values
	(3, 3, 'Blumenau')

insert into
	public.cidade(id, id_uf, nome)
values
	(4, 3, 'Joinville')

select * from public.uf
select * from public.cidade

insert into
	public.cidade(id, id_uf, nome)
values
	(5,1,'Curitiba')

insert into
	public.cidade(id, id_uf, nome)
values
	(6,1,'Maringá')

insert into
	public.cidade(id, id_uf, nome)
values
	(7,1,'Lunardeli')

insert into
	public.cidade(id, id_uf, nome)
values
	(8,1,'Apucarana')

insert into
	public.cidade(id, id_uf, nome)
values
	(9,1,'Santa fé')

insert into
	public.cidade(id, id_uf, nome)
values
	(10,1,'São Miguel do Igraçu')

insert into
	public.cidade(id, id_uf, nome)
values
	(11,1,'Arapongas')

insert into
	public.cidade(id, id_uf, nome)
values
	(12,1,'Ponta Grossa')

insert into
	public.cidade(id, id_uf, nome)
values
	(13,1,'Jandaia do Sul')


3 - Realize a remoção dos estados que não tem cidades
delete from public.uf where id = 4
delete from public.uf where id = 5
delete from public.uf where id = 6
select * from public.uf

4 - Insira novas cidades no estado de SP
insert into
	public.cidade(id, id_uf, nome)
values
	(14,2,'Guarulhos')

insert into
	public.cidade(id, id_uf, nome)
values
	(15,2,'Campinas')

insert into
	public.cidade(id, id_uf, nome)
values
	(16,2,'Santos')

insert into
	public.cidade(id, id_uf, nome)
values
	(17,2,'Jundiaí')
 	
insert into
	public.cidade(id, id_uf, nome)
values
	(18,2,'Suzano')

select * from public.cidade

5 - Realize a atualização do nome das cidades:
* Lunardeli para Lunardelli
* Jandaia do Sul para Jandaia
* Maringá para Cidade Canção

update public.cidade set nome = 'Lunardelli' where id = 7
select * from public.cidade
update public.cidade set nome = 'Jandaia' where id = 13
select * from public.cidade
update public.cidade set nome = 'Cidade Canção' where id = 6
select * from public.cidade


6 - Faça um select que retorne o nome das cidades e seus respectivos estados.
Ordene por estados e posteriormente pelo nome das cidades
//Ordene por estados
select 
	cidade.id,
	cidade.nome,
	uf.sigla
from
	public.cidade cidade,
	public.uf uf  
where
	uf.id = cidade.id_uf
	order by uf asc


//e posteriormente pelo nome das cidades
select 
	cidade.id,
	cidade.nome,
	uf.sigla
from
	public.cidade cidade,
	public.uf uf  
where
	uf.id = cidade.id_uf
	order by nome asc



7 - Retorne quantas cidades cada estado possui :) (não expliquei ainda)
dica: veja group by e count()

8 - adicione um campo "tipo endereço" na tabela de endereço, 
os tipos poderão ser: COMERCIAL, RESIDENCIAL

create table public.endereco(
	id bigint not null generated by default as identity,
	id_cidade bigint,
	id_pessoa bigint,
	logradouro varchar(200) not null,
	numero varchar(10) not null,
	cep varchar(8) not null,
	complemento varchar(100) not null,
	constraint endereco_pk primary key (id),
	constraint endereco_cidade_fk foreign key (id_cidade) references public.cidade(id),
	constraint endereco_pessoa_fk foreign key (id_pessoa) references public.pessoa(id)
);

alter table public.endereco
	add column tipo_endereco varchar(11)

9 - Insira três pessoas na base de dados.
Cada uma destas pessoas deve ter dois endereços (um comercial e outro residencial).
As cidades que devem ser usadas são do estado do PR (você escolhe)

create table public.recibo(
	id bigint not null generated by default as identity,
	id_cliente bigint not null,
	id_emitente bigint not null,
	id_cidade bigint not null,
	sequencia bigint not null,
	data date not null,
	assinatura varchar(50) not null,
	valor numeric(16,2) not null,
	constraint recibo_pk primary key (id),
	constraint recibo_cliente_fk foreign key (id_cliente) references public.pessoa(id),
	constraint recibo_emitente_fk foreign key (id_emitente) references public.pessoa(id),
	constraint recibo_cidade_fk foreign key (id_cidade) references public.cidade(id)
);

select * from public.usuario

insert into
	public.usuario(id,login, senha)
values
	(1,'chayanebalmant', '123456')
	
insert into
	public.pessoa(id,id_usuario, nome, cpf)
values
	(1,1,'Chayane', '0081721293')
	
select * from public.pessoa

select * from public.usuario

insert into
	public.usuario(id,login, senha)
values
	(2,'valfrido', '012345')
	
insert into
	public.pessoa(id,id_usuario, nome, cpf)
values
	(2,2,'Valfrido', '00812302100')
	
select * from public.pessoa

select * from public.usuario

insert into
	public.usuario(id,login, senha)
values
	(3,'jpfreitasb', 'soufresco!')
	
insert into
	public.pessoa(id,id_usuario, nome, cpf)
values
	(3,3,'Joao Pedro Freitas Brigagao', '12345608000')

select * from public.endereco
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(1, 6, 1, 'Av. Londrina, zona 08', '838','87050730','B10A41', 'RESIDENCIAL')
	
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(2, 6, 1, 'Av. Advogado Horácio Raccanello Filho, zona 07', '5410','87020035','-', 'comercial')

select * from public.endereco
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(3, 5, 2, 'Rua Britânia, Vila Becker', '39','85902480','casa amarela', 'RESIDENCIAL')
	
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(4,5, 2, 'R. Cristo Rei, Vila Becker ', '19','85902490','-', 'comercial')

select * from public.endereco
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(5, 6, 3, 'Quadra 36, conjunto H - Guará II', 'casa 8','71065083','casa amarela de andar', 'RESIDENCIAL')
	
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(6,6, 3, 'Huawei Brasilia: SCN Q 5 BL A ', 's-916','70715900','-', 'comercial')

10 -Insira duas pessoas na base de dados.
Cada uma destas pessoas deve ter dois endereços (um comercial e outro residencial).
As cidades que devem ser usadas são do estado de SP (você escolhe).


select * from public.cidade
insert into
	public.usuario(id,login, senha)
values
	(4,'danielinha', 'medvetporamor')
	
insert into
	public.pessoa(id,id_usuario, nome, cpf)
values
	(4,4,'Daniela Borges da Cruz', '10987654321')
	
select * from public.pessoa order by id asc

select * from public.endereco
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(7, 15, 4, 'Rua Duque de Caxias, Centro', '712','13015060','-', 'RESIDENCIAL')
	
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(8,15, 4, 'Av. Monte Castelo, Jardim Proença', '234','13026241','-', 'comercial')


select * from public.pessoa
insert into
	public.usuario(id,login, senha)
values
	(5,'andrephmas', 'eletronica&skate')
	
insert into
	public.pessoa(id,id_usuario, nome, cpf)
values
	(5,5,'Andre Phillipe Milhomem Aquino Santana', '11087654321')
	
select * from public.pessoa order by id asc

select * from public.endereco
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(9, 14, 5, 'Rua Santa Maria, Jardim La Salle', '360', '85902570', 'ap 122', 'RESIDENCIAL')
	
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(10, 14, 5, 'Av. Locatelli', '499','13026241','-', 'comercial')

11 - Insira duas pessoas na base de dados.
Cada uma destas pessoas deve ter um endereço do tipo comercial.
As cidades que devem ser usadas são do estado de SC (você escolhe).
select * from public.pessoa

insert into
	public.usuario(id,login, senha)
values
	(6,'mkacunha', 'code&tea')
	
insert into
	public.pessoa(id,id_usuario, nome, cpf)
values
	(6,6,'Maiko Da Cunha', '11087654109')
	
insert into
	public.usuario(id,login, senha)
values
	(7,'lu', 'tapetevermelh)')
	
insert into
	public.pessoa(id,id_usuario, nome, cpf)
values
	(7,7,'Luciana Balmant', '11099654109')
	
select * from public.pessoa order by id asc
select * from public.cidade order by id asc

select * from public.endereco
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(11, 2, 6, 'Rua Loureiro', '555', '87902890', 'ap 10', 'RESIDENCIAL')
	
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(12, 2, 6, 'Av. Brasil', '1500','13096241','s/n', 'comercial')
	
	
ctrl+enter para executar comandos selecionados
	
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(13, 3, 7, 'Rua do Batman', '010', '85902980', '-', 'RESIDENCIAL')
	
insert into
	public.endereco(id, id_cidade, id_pessoa, logradouro, numero, cep, complemento, tipo_endereco)
values
	(14, 3, 7, 'Av. Bocaiuva', '2009','13026001','-', 'comercial')


12 - Faça um select que retorne o nome das pessoas e seus respectivos endereços (com cidade e estado).
Ordene por nome de pessoa, nome do estado e nome da cidade.
//select * from public.endereco order by id
//select * from public.pessoa order by id


select	
	pessoa.nome,
	ender.logradouro,
	cid.nome,
	uf.nome

from 
	public.pessoa pessoa,
	public.endereco ender,
	public.cidade cid,
	public.uf uf

where
	ender.id_pessoa=pessoa.id
	and ender.id_cidade=cid.id
	and cid.id_uf=uf.id
	order by pessoa.nome, uf.nome, cid.nome
13 - remova todos as pessoas que tem endereço da cidade de Ribeirão Preto
nenhum tem.

14 - Mude todos os endereços residenciais do sistema. Eles devem ter CEP 00000000
	select * from public.endereco
	update public.endereco set cep = '00000000' where id = 1
	update public.endereco set cep = '00000000' where id = 3
	update public.endereco set cep = '00000000' where id = 5
	update public.endereco set cep = '00000000' where id = 7
	update public.endereco set cep = '00000000' where id = 9
	update public.endereco set cep = '00000000' where id = 11
	update public.endereco set cep = '00000000' where id = 13
	select * from public.endereco order by id asc

15 - Insira dois recibos sendo que eles devem ter clientes residentes no PR e o emitente de servico deve ser o mesmo (não importando o estado). Exemplo: 
* cliente fusca, da cidade Curitiba, no PR. emitente: DB1, estado PR.
* cliente Tamara, da cidade Maringá, no PR. emitente: DB1, estado PR.
select * from public.endereco order by id
	delete from public.recibo where id = 1
insert into 
	public.recibo(id,  id_cliente, id_emitente, id_cidade, sequencia, "data", assinatura, valor) 
values(1, 2, 4, 5, 0001,CURRENT_DATE, 'assinado', 789.00);
insert into 
	public.recibo(id,  id_cliente, id_emitente, id_cidade, sequencia, "data", assinatura, valor) 
values(2, 1, 4, 5, 0002,CURRENT_DATE, 'assinado', 979.13);
select * from public.recibo order by id

16 - Insira dois recibos sendo que eles devem ter clientes residentes no PR e emitentes de serviços diferentes. Exemplo: 
* cliente fusca, da cidade Curitiba, no PR. emitente: FCV, estado PR.
* cliente Tamara, da cidade Maringá, no PR. emitente: USP, estado SP.

insert into 
	public.recibo(id,  id_cliente, id_emitente, id_cidade, sequencia, "data", assinatura, valor) 
values(3, 2, 4, 5, 0003,CURRENT_DATE, 'assinado', 789.00);

insert into 
	public.recibo(id,  id_cliente, id_emitente, id_cidade, sequencia, "data", assinatura, valor) 
values(4, 1, 5, 14, 0004,CURRENT_DATE, 'assinado', 209.00);


select * from public.endereco order by id
select * from public.cidade order by id
select * from public.recibo order by id


17 - Realize uma consulta na base de dados e exiba os seguintes dados:		
* numero do recibo
* data emissão do recibo
* valor do recibo
* nome do cliente 
* estado do cliente
* nome do emitente
* estado do emitente

ordene por data de recibo, nome do cliente e nome do emitente

//select * from public.recibo order by id
select 
	rec.sequencia,
	rec.data,
	rec.valor,
	cliente.nome,
	uf.nome,
	emit.nome,
	uf.nome
	
	
from
	public.recibo rec,
	public.pessoa cliente,
	public.pessoa emit,
	public.cidade cid,
	public.uf uf
	
	
where
	rec.id_cliente = cliente.id
	and rec.id_emitente=emit.id
	and rec.id_cidade= cid.id
	and cid.id_uf=uf.id
	order by data, cliente.nome, emit.nome

18 - Faça uma consulta que mostre:
* quantidade de recibos emitidos no PR

//select * from public.recibo order by id

select 
	count(uf.sigla),
	uf.sigla

from
	public.recibo rec,
	public.pessoa cli,
	public.pessoa emit,
	public.cidade cid,
	public.uf uf
		
where
	rec.id_cliente = cli.id
	and rec.id_emitente=emit.id
	and rec.id_cidade= cid.id
	and cid.id_uf=uf.id
	and uf.sigla like 'PR'
group by
	uf.sigla;


* valor total de recibos emitidos no PR


select 
	sum(rec.valor),
	uf.sigla

from
	public.recibo rec,
	public.pessoa cli,
	public.pessoa emit,
	public.cidade cid,
	public.uf uf
		
where
	rec.id_cliente = cli.id
	and rec.id_emitente=emit.id
	and rec.id_cidade= cid.id
	and cid.id_uf=uf.id
	and uf.sigla like 'PR'
group by
	uf.sigla;